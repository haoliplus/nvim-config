{
  "aaa": {
    "prefix": "aaa",
    "body": [
      "line1",
      "line2"
    ],
    "description": "HHHHHHH"
  },
  "json.dumps": {
    "prefix": "jsondumps",
    "body": [
       "json.dumps(data, indent=2, default=str)"
    ]
  },
  "jsoncls": {
    "prefix": "custom_json_cls",
    "body": [
       "class CustomEncoder(json.JSONEncoder):",
       "    def default(self, obj):",
       "        try:",
       "            ret = json.JSONEncoder.default(self, obj)",
       "            return ret",
       "        except Exception:",
       "            return str(obj)",
       "# json.dumps(data, cls=CustomEncoder)"

    ]
  },
  "run_scripts": {
      "prefix": "run_scripts",
      "body": [
          "import subprocess",
          "proc = subprocess.Popen(['bash', '-c', script_str],",
              "stdout=None, stderr=None, stdin=subprocess.PIPE", ")",
          "stdout, stderr = proc.communicate()",
          "if proc.returncode:",
          "    raise ScriptException(proc.returncode, stdout, stderr, script_str)"


      ]
  },
  "aaa": {
    "prefix": "time",
    "body": [
      "datetime.strptime(ts, \"%Y-%m-%dT%H:%M:%SZ\")"
    ],
    "description": "parse time str"
  },
  "process": {
    "prefix": "process",
    "body": [
      "import concurrent.futures",
      "argvs = []",
      "def func(arg):",
      "    return arg",
      "with concurrent.futures.ProcessPoolExecutor() as executor:",
      "    for arg, ret in zip(args, executor.map(func, args)):",
      "        print('%d ret: %s' % (arg, ret))"
    ],
    "description": "multiple processing"
  },
  "thread": {
    "prefix": "thread",
    "body": [
      "import concurrent.futures",
      "URLS = []",
      "def func(arg, param):",
      "    return arg",
      "with concurrent.futures.ThreadPoolExecutor() as executor:",
      "    future_to_url = {executor.submit(func, url, 60): url for url in URLS}",
      "    for future in concurrent.futures.as_completed(future_to_url):",
      "        url = future_to_url[future]",
      "        try:",
      "            data = future.result()",
      "        except Exception as exc:",
      "            print('%r generated an exception: %s' % (url, exc))",
      "        else:",
      "            print('%r page is %d bytes' % (url, len(data)))"
      ],
    "description": "multiple thread"
  }
}
