{
  "logger0": {
    "prefix": "logger",
    "body": [
      "from loguru import logger",
      "import os",
      "LOG_LEVEL = os.getenv(\"LOGURU_LEVEL\", \"INFO\")",
      "LOG_FORMAT = os.getenv(\"LOGURU_FORMAT\", \"<green>[{level:.1} {time:MM-DD HH:mm:ss} {file}:{line}]</green> <level>{message}</level>\")",
      "LOG_PATH = os.getenv(\"LOGURU_PATH\", \"/tmp/log.txt\"",
      "logger.remove()",
      "logger.add(sys.stdout, format=LOG_FORMAT, level=LOG_LEVEL)",
      "logger.add(LOG_PATH)"
    ]
  },
  "logger": {
      "prefix": "logger",
      "body": [
            "import sys",
            "from pathlib import Path",
            "import traceback",
            "from loguru import logger",
            "def init_logger(",
            "    base_name=\"temp_{time}.log\",",
            "    log_dir=str(Path.home() / \".cache\" / \"log\"),",
            "    stdout_format=\"<green>[{level:.1} {time:MM-DD HH:mm:ss.sss} {file}:{line}]</green> <level>{message}</level>\",",
            "    file_format=\"[{level} {process.name}.{thread.name} {time:MM-DD HH:mm:ss.sss} {file}:{line}] <level>{message}</level>\",",
            "    filter_func=None,",
            "    reset=False,",
            "):",
            "    log_dir = Path(log_dir)",
            "    Path(log_dir).mkdir(parents=True, exist_ok=True)",
            "    if not reset:",
            "        handler_id = logger.add(sink=sys.stdout, level=\"CRITICAL\")",
            "        if handler_id > 1:",
            "            logger.remove(handler_id)",
            "            logger.info(\"已经初始化过logger，不再初始化\")",
            "            return",
            "    logger.remove()",
            "    logger.info(\"Remove all handlers\")",
            "    handler_id = logger.add(",
            "        sink=sys.stdout,",
            "        colorize=True,",
            "        level=\"INFO\",",
            "        format=stdout_format,",
            "        filter=filter_func,",
            "    )",
            "    logger.info(\"Add stdout handler\")",
            "    log_file_path = log_dir / base_name",
            "    handler_id = logger.add(",
            "        sink=str(log_file_path),",
            "        colorize=False,",
            "        level=\"DEBUG\",",
            "        format=file_format,",
            "    )",
            "    logger.info(f\"Add file handler ? {log_file_path}\")",
            "    logger.info(f\"初始化logger {logger}: {traceback.format_stack()[-2]}\")"
      ],
      "description": "Init logger"
  },
  "thread": {
    "prefix": "thread",
    "body": [
      "import concurrent.futures",
      "URLS = []",
      "def func(arg, param):",
      "    return arg",
      "with concurrent.futures.ThreadPoolExecutor() as executor:",
      "    future_to_url = {executor.submit(func, url, 60): url for url in URLS}",
      "    for future in concurrent.futures.as_completed(future_to_url):",
      "        url = future_to_url[future]",
      "        try:",
      "            data = future.result()",
      "        except Exception as exc:",
      "            print('%r generated an exception: %s' % (url, exc))",
      "        else:",
      "            print('%r page is %d bytes' % (url, len(data)))"
      ],
    "description": "multiple thread"
  },
  "database": {
    "prefix": "database",
    "body": [
        "from flask_sqlalchemy import SQLAlchemy",
        "db = SQLAlchemy()",

        "def initialize_db(app):",
        "    db.init_app(app)",
        "    return db",
        "from dataclasses import dataclass",
        "from sqlalchemy.sql import func",
        "import json",
        "@dataclass",
        "class Sample(db.Model):",
        "    id: int",
        "    firstname: str",
        "    lastname: str",
        "    email: str",
        "    age: int",
        "    bio: str",
        "    id = db.Column(db.Integer, primary_key=True)",
        "    firstname = db.Column(db.String(100), nullable=False)",
        "    lastname = db.Column(db.String(100), nullable=False)",
        "    email = db.Column(db.String(80), unique=True, nullable=False)",
        "    age = db.Column(db.Integer)",
        "    created_at = db.Column(db.DateTime(timezone=True), server_default=func.now())",
        "    bio = db.Column(db.Text)",
        "    def __repr__(self):",
        "        return f'<Student {self.firstname}>'",
        "    def toDict(self):",
        "        return {",
        "            'id': None if self.id is None else int(self.id),",
        "            'firstname': None if self.firstname is None else str(self.firstname),",
        "            'lastname': None if self.lastname is None else str(self.lastname),",
        "            'email': None if self.email is None else str(self.email),",
        "            'age': None if self.age is None else str(self.age),",
        "            'bio': None if self.bio is None else str(self.bio),",
        "        }",
        "    def toJson(self):",
        "        return json.dumps(self.toDict())",
        "body = {'firstname': 'sample'}",
        "sample = Sample(**body)",
        "db.session.add(sample)",
        "db.session.commit()",
        "samples = Sample.query.all()",
        "samples = [sample.toDict() for sample in samples]",
        "sample = Sample.query.filter_by(firstname='Sammy').all()",
        "sample = Sample.query.get_or_404(id)",
        "db.session.delete(sample)",
        "db.session.commit()"
    ],
    "description": "database"
  }
}

