{
  "aaa": {
    "prefix": "aaasample",
    "body": [
      "line1",
      "line2"
    ],
    "description": "HHHHHHH"
  },
  "arg": {
    "prefix": "arg",
    "body": [
        "import argparse",
        "parser = argparse.ArgumentParser(description='config evaluate')",
        "parser.add_argument(",
        "  --name,",
        "  default='',",
        "  type=str",
        ")",
        "args = parser.parse_args()"
    ],
    "description": ""
  },
  "singleton": {
    "prefix": "singleton",
    "body": [
        "class Singleton(type):",
        "  __instance = {}",
        "  def __call__(cls, *args, **kwargs):",
        "    if cls not in cls.__instance:",
        "      cls.__instance[cls] = super().__call__(*args, **kwargs)",
        "    return cls.__instance[cls]",
        "class MyClass(metaclass=Singleton):",
        "  pass"
    ],
    "description": ""
  },
  "loadproto": {
    "prefix": "proto",
    "body": [
        "from google.protobuf import text_format",
        "text_format.Parse(open(path, \"r\").read(), obj)"
    ],
    "description": ""
  },
  "datetime": {
    "prefix": "datetime",
    "body": [
        "from datetime import datetime",
        "dt_object = datetime.fromtimestamp(${1})"
    ],
    "description": ""
  },
  "datetime2": {
    "prefix": "datetime",
    "body": [
        "from datetime import datetime",
        "dt = datetime(year=${1}, month=${2}, day=${3})",
        "ts = datetime.timestamp(dt)"
    ],
    "description": ""
  },
  "datetimestr": {
    "prefix": "datetime",
    "body": [
        "from datetime import datetime",
        "datetime.strptime(\"2021-01-02 10:00:00.123\", \"%Y-%m-%d %H:%M:%S.%f\")"
    ],
    "description": ""
  },
  "datetimestr2": {
    "prefix": "datetime",
    "body": [
        "from datetime import datetime",
        "now = datetime.now()",
        "now.strftime(\"%Y-%m-%d %H:%M:%S.%f\")"
    ],
    "description": ""
  },
  "iff": {
    "prefix": "iff",
    "body": [
        "???"
    ],
    "description": ""
  },
  "ifx": {
    "prefix": "ifmain",
    "body": [
        "if __name__ == `__main__:"
    ],
    "description": ""
  },
  "jsondumps": {
    "prefix": "jsondumps",
    "body": [
       "json.dumps(data, indent=2, default=str)"
    ]
  },
  "run_scripts": {
      "prefix": "run_scripts",
      "body": [
          "import subprocess",
          "proc = subprocess.Popen(['bash', '-c', script_str],",
              "stdout=None, stderr=None, stdin=subprocess.PIPE", ")",
          "stdout, stderr = proc.communicate()",
          "if proc.returncode:",
          "    raise ScriptException(proc.returncode, stdout, stderr, script_str)"
      ]
  },
  "time": {
    "prefix": "time",
    "body": [
      "datetime.strptime(ts, \"%Y-%m-%dT%H:%M:%SZ\")"
    ],
    "description": "parse time str"
  },
  "process": {
    "prefix": "process",
    "body": [
      "import concurrent.futures",
      "argvs = []",
      "def func(arg):",
      "    return arg",
      "with concurrent.futures.ProcessPoolExecutor() as executor:",
      "    for arg, ret in zip(args, executor.map(func, args)):",
      "        print('%d ret: %s' % (arg, ret))"
    ],
    "description": "multiple processing"
  },
  "process2": {
    "prefix": "process",
    "body": [
        "import multiprocessing as mp",
        "def task(slice, shared_data):",
        "  pass",
        "n_worker = 8",
        "pool = mp.Pool(n_worker)",
        "result_list = []",
        "inp_list = [1, 2, 3, 4]",
        "num = len(inp_list)",
        "shared_data = None",
        "num_slice = num // n_worker",
        "for i in range(n_worker):",
        "  tmp = inp_list[num_slice * i : num_slice * (i + 1)]",
        "  result_list.append(pool.apply_async(task, args=(tmp[:], shared_data)))",
        "pool.close()",
        "pool.join()",
        "results = [result.get() for result in result_list]"
    ],
    "description": "multiple processing"
  },
  "thread": {
    "prefix": "thread",
    "body": [
      "import concurrent.futures",
      "URLS = []",
      "def func(arg, param):",
      "    return arg",
      "with concurrent.futures.ThreadPoolExecutor() as executor:",
      "    future_to_url = {executor.submit(func, url, 60): url for url in URLS}",
      "    for future in concurrent.futures.as_completed(future_to_url):",
      "        url = future_to_url[future]",
      "        try:",
      "            data = future.result()",
      "        except Exception as exc:",
      "            print('%r generated an exception: %s' % (url, exc))",
      "        else:",
      "            print('%r page is %d bytes' % (url, len(data)))"
      ],
    "description": "multiple thread"
  },
  "thread2": {
    "prefix": "thread",
    "body": [
        "import threading",
        "class MyThread(threading.Thread):",
        "  def run(self):",
        "    pass",
        "for f in range(4):",
        "  t = MyThread()",
        "  t.start()",
        "  t.join()"
    ],
    "description": "multiple thread"
  }
}
